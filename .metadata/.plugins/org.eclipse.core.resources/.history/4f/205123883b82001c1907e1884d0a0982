package com.utfpr.delivery.service;

import java.util.List;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.utfpr.delivery.entity.PedidoItem;
import com.utfpr.delivery.exception.NotFoundException;
import com.utfpr.delivery.mapper.pedidoItem.PedidoItemDTOMapper;
import com.utfpr.delivery.repository.PedidoRepository;
import com.utfpr.delivery.repository.PedidoitemRepository;

@Service
public class PedidoItemService {

	@Autowired
	private PedidoItemDTOMapper pedidoItemDTOMapper;
	
	@Autowired
	private PedidoitemRepository pedidoItemRepository;
	@Autowired
	private PedidoRepository pedidoRepository;
	@Autowired
	ObjectMapper objectMapper;

	public List<PedidoItem> listar() {
		
		List<PedidoItem> pedidoItems = pedidoItemRepository.findAll();
		return pedidoItemDTOMapper.mapearLista(pedidoItems);	
		
	}
	
	public List<PedidoItem> listarItems(String uuid) {
		return pedidoItemRepository.findByPedido(pedidoRepository.findByUuid(uuid));
	}

	public PedidoItem obterPedidoPorUuid(String uuid) {

		PedidoItem pedidoItem = pedidoItemRepository.findByUuid(uuid);

		if (pedidoItem == null) {
			throw new NotFoundException("Pedido n√£o encontrado");
		}

		return pedidoItem;

	}

	public PedidoItem salvar(PedidoItem pedidoItem) {

		return pedidoItemRepository.save(pedidoItem);
	}
	
	public PedidoItem adicionar(String uuid, PedidoItem pedidoItem) {
		 
		PedidoItem pedidoItemAtual = this.obterPedidoPorUuid(uuid);
 
		BeanUtils.copyProperties(pedidoItem, pedidoItemAtual, "id", "uuid");

		return pedidoItemRepository.save(pedidoItemAtual);

	}

	public PedidoItem alterar(String uuid, PedidoItem pedidoItem) {

		PedidoItem pedidoItemAtual = this.obterPedidoPorUuid(uuid);

		if (pedidoItemAtual != null) {
			BeanUtils.copyProperties(pedidoItem, pedidoItemAtual, "id", "uuid");

			return pedidoItemRepository.save(pedidoItemAtual);
		}

		return null;
	}

	public boolean deletar(String uuid) {

		PedidoItem pedidoItem = this.obterPedidoPorUuid(uuid);

		if (pedidoItem != null) {

			try {
				pedidoItemRepository.delete(pedidoItem);
				return true;
			} catch (EmptyResultDataAccessException ex) {
				System.out.println(ex.getMessage());
			}

		}

		return false;
	}
}
